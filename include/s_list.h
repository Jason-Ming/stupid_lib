#ifndef __S_LIST_H__
#define __S_LIST_H__
#include <string.h>
#include <s_clinkage.h>
#include <s_type.h>
#include <s_defines.h>

// 双向链表节点
struct list_head
{
struct list_head * next, *prev;
};


// 初始化节点：设置name节点的前继节点和后继节点都是指向name本身。
#define LIST_HEAD_INIT(name)	{ &(name), &(name) }

// 定义表头(节点)
//：新建双向链表表头name，并设置name的前继节点和后继节点都是指向name本身。
#define LIST_HEAD(name) 												\
		struct list_head name = LIST_HEAD_INIT(name)

// 初始化节点：将list节点的前继节点和后继节点都是指向list本身。
static inline void INIT_LIST_HEAD(struct list_head * list)
{
	list->next = list;
	list->prev = list;
}


// 添加节点：将new插入到prev和next之间。
static inline void __list_add(struct list_head * new, 
	struct list_head * prev, 
	struct list_head * next)
{
	next->prev = new;
	new->next = next;
	new->prev = prev;
	prev->next = new;
}


// 添加new节点：将new添加到head之后，是new称为head的后继节点。
static inline void list_add(struct list_head * new, struct list_head * head)
{
	__list_add(new, head, head->next);
}


// 添加new节点：将new添加到head之前，即将new添加到双链表的末尾。
static inline void list_add_tail(struct list_head * new, struct list_head * head)
{
	__list_add(new, head->prev, head);
}


// 从双链表中删除entry节点。
static inline void __list_del(struct list_head * prev, struct list_head * next)
{
	next->prev = prev;
	prev->next = next;
}


// 从双链表中删除entry节点。
static inline void list_del(struct list_head * entry)
{
	__list_del(entry->prev, entry->next);
}


// 从双链表中删除entry节点。
static inline void __list_del_entry(struct list_head * entry)
{
	__list_del(entry->prev, entry->next);
}


// 从双链表中删除entry节点，并将entry节点的前继节点和后继节点都指向entry本身。
static inline void list_del_init(struct list_head * entry)
{
	__list_del_entry(entry);
	INIT_LIST_HEAD(entry);
}


// 用new节点取代old节点
static inline void list_replace(struct list_head * old, 
	struct list_head * new)
{
	new->next = old->next;
	new->next->prev = new;
	new->prev = old->prev;
	new->prev->next = new;
}


// 双链表是否为空
static inline int list_empty(const struct list_head * head)
{
	return head->next == head;
}


// 获得结构体(TYPE)的变量成员(MEMBER)在此结构体中的偏移量。
#define s_offsetof(TYPE, MEMBER) ((size_t) &((TYPE *)0)->MEMBER)

// 根据"结构体(type)变量"中的"域成员变量(member)的指针(ptr)"
//来获取指向整个结构体变量的指针
#define container_of(ptr, type, member) ({								\
		const __typeof( ((type *)0)->member ) *__mptr = (ptr);			\
		(type *)( (char *)__mptr - s_offsetof(type,member) );})

// 遍历双向链表
#define list_for_each_all(pos, head)									\
		for (pos = (head)->next; pos != (head); pos = pos->next)

#define list_for_each_all_safe(pos, n, head)							\
		for (pos = (head)->next, n = pos->next; pos != (head);			\
		pos = n, n = pos->next)

#define list_for_each_all_reverse(pos, head)							\
		for (pos = (head)->prev; pos != (head); pos = pos->prev)

#define list_for_each_all_reverse_safe(pos, p, head)					\
		for (pos = (head)->prev, p = pos->prev; pos != (head);			\
		pos = p, p = pos->prev)

#define list_for_each(pos, head, start, end)							\
		for (pos = ((start) == (head))?((start)->next):(start); 		\
		pos != (((end) == (head))?(head):(end)->next); pos = (pos)->next)

#define list_for_each_safe(pos, n, head, start, end)					\
		for (pos = ((start) == (head))?((start)->next):(start), n = pos->next; \
		pos != (((end) == (head))?(head):(end)->next); pos = n, n = pos->next)

#define list_for_each_reverse(pos, head, start, end)					\
		for (pos = ((end) == (head))?((end)->prev):(end);				\
		pos != (((start) == (head))?(head):(start)->prev); pos = pos->prev)

#define list_for_each_reverse_safe(pos, p, head, start, end)			\
		for (pos = ((end) == (head))?((end)->prev):(end), p = pos->prev; \
		pos != (((start) == (head))?(head):(start)->prev); pos = p, p = pos->prev)

#define list_entry(ptr, type, member)									\
		container_of(ptr, type, member)

#endif

